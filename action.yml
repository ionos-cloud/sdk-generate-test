name: 'Ionos Cloud SDK: Generate and Test'
description: 'Generates and tests an Ionos Cloud SDK'

inputs:

  sdk-name:
    description: 'name of sdk to generate'
    required: true
  sdk-branch:
    description: 'name of branch where to generate the sdk'
    required: false
    default: master
  version:  # id of input
    description: 'version to generate'
    required: true
    default: 'v6.0.0'
  ionos-vdc-user:
    description: 'Ionos Cloud username'
    required: true
  ionos-vdc-password:
    description: 'Ionos Cloud password'
    required: true
  codex-s3-bucket:
    description: 'codex bucket to use'
    required: true
  codex-s3-key:
    description: 'codex s3 key to access the bucket'
    required: true
  codex-s3-secret:
    description: 'codex s3 secret to access the bucket'
    required: true
  node-auth-token:
    description: 'auth token to use with the github registry - use secrets.GITHUB_TOKEN'
    required: true
  github-pat:
    description: 'github personal access token used to clone the sdk repositories'
    required: true
  assets-dir: 
    description: 'assets directory'
    required: true
  test:
    description: 'whether to run tests or not'
    required: false
    default: true
  test-driver:
    description: 'test driver to use'
    required: true
  test-suite:
    description: 'test suite to run'
    required: true
  test-dir:
    description: 'directory holding tests'
    required: true
  test-runner-args:
    description: 'extra args to pass to the test runner'
    required: false
    default: '--fail-fast --batch'
  git-versioning:
    description: 'whether to create tags and branches or not'
    required: false
    default: false

outputs:
  sdk-dir:
    description: "Directory with the generated SDK"
    value: ${{ steps.output-sdk-dir.outputs.sdk-dir }}

runs:
       
  using: "composite"
  steps:

    - name: Cloning repositories
      shell: bash
      env:
        IONOS_SDK_NAME: ${{ inputs.sdk-name }}
        IONOS_SDK_BRANCH: ${{ inputs.sdk-branch }}
        GITHUB_PAT: ${{ inputs.github-pat }}
      run: |
        echo "::group::Cloning repositories"
        ${{ github.action_path }}/clone.sh
        echo "::endgroup::"

    - name: Checking if version already exists
      working-directory: /tmp/${{ inputs.sdk-name }}
      shell: bash
      env:
        IONOS_SDK_VERSION: ${{ inputs.version }}
      run: |-
        if [ "${{ inputs.git-versioning }}" == "true" ]; then
          echo "::group::Checking if a git tag for version ${{ inputs.version }} already exists"
          bash ${{ github.action_path }}/check-tag.sh
          echo "::endgroup::"
        else
          echo "::group::Skipping git tag check"
          echo "::endgroup::"
        fi

        
    - name: Installing the Codex
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.node-auth-token }}
      run: |
        echo "::group::Installing codex"
        npm install -g @ionos-cloud/codex
        codex config s3.key ${{ inputs.codex-s3-key }}
        codex config s3.secret ${{ inputs.codex-s3-secret }}
        codex config s3.bucket ${{ inputs.codex-s3-bucket }}
        echo "::endgroup::"

    - name: Installing ionossdk
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.node-auth-token }}
      run: |
        echo "::group::Installing ionossdk"
        npm install -g @ionos-cloud/ionossdk
        echo "::endgroup::"

    - name: Compiling the Codex
      shell: bash
      run: |
        echo "::group::Compiling the codex"
        codex compile -o /tmp/swagger.json --debug
        echo "::endgroup::"

    - name: Generating the SDK
      shell: bash
      run: |-
        echo "::group::Generating the SDK"
        ionossdk generate \
        --name ${{ inputs.sdk-name }} \
        --spec /tmp/swagger.json \
        --assets-dir ${GITHUB_WORKSPACE}/${{ inputs.assets-dir }} \
        --version ${{ inputs.version }} \
        --output-dir /tmp/${{ inputs.sdk-name }} \
        --build --debug
        echo "::endgroup::"
   
    - name: Setting up ionossdk env
      shell: bash
      run: |-
        ionossdk env \
        --name ${{ inputs.sdk-name }} \
        --spec /tmp/swagger.json \
        --assets-dir ${GITHUB_WORKSPACE}/${{ inputs.assets-dir }} \
        --version ${{ inputs.version }} \
        --output-dir /tmp/${{ inputs.sdk-name }} >> $GITHUB_ENV

    - name: Installing the test runner
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.node-auth-token }}
      run: |
        if [ "${{ inputs.test }}" == "true" ]; then
          echo "::group::Installing test runner"
          npm install -g @ionos-cloud/test-runner
          echo "::endgroup::"
        else
          exit 0
        fi

    - name: Testing the SDK
      shell: bash
      working-directory: ${{ inputs.test-dir }}
      env:
        IONOS_SDK_DIR: /tmp/${{ inputs.sdk-name }}
        IONOS_SDK_VERSION: ${{ inputs.version }}
        IONOS_SDK_TEST_DRIVER_DIR: /tmp/test-drivers/${{ inputs.test-driver }}
        IONOS_SDK_TEST_SUITE: ${{ inputs.test-suite }}
        IONOS_USERNAME: ${{ inputs.ionos-vdc-user }}
        IONOS_PASSWORD: ${{ inputs.ionos-vdc-password }}
        IONOS_SDK_TEST_RUNNER_ARGS: ${{ inputs.test-runner-args }}
      run: |-
        if [ "${{ inputs.test }}" == "true" ]; then
          echo "::group::Running tests"
          env | grep IONOS_SDK
          bash ${GITHUB_WORKSPACE}/${{ inputs.assets-dir }}/scripts/test.sh
          echo "::endgroup::"
        else
          echo "::group::Skipping tests"
          echo "::endgroup::"
          exit 0
        fi

    - name: Creating git tag and branch
      working-directory: /tmp/${{ inputs.sdk-name }}
      shell: bash
      run: |-
        if [ "${{ inputs.git-versioning }}" == "true" ]; then
          echo "::group::Creating git tag and branch (if needed)"
          bash ${{ github.action_path }}/git-versioning.sh ${{ inputs.version }}
          echo "::endgroup::"
        else
          echo "::group::Skipping git tag and branch"
          echo "::endgroup::"
        fi


    - id: output-sdk-dir
      shell: bash
      run: echo "::set-output name=sdk-dir::/tmp/${{ inputs.sdk-name }}"
